// Mocks generated by Mockito 5.4.4 from annotations
// in stik/test/app_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:stik/core/auth/state.dart' as _i5;
import 'package:stik/core/auth/user.dart' as _i2;
import 'package:stik/core/auth/user_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i3.UserRepository {
  @override
  _i4.Stream<_i5.AuthenticationStatus> get authStatusUpdates =>
      (super.noSuchMethod(
        Invocation.getter(#authStatusUpdates),
        returnValue: _i4.Stream<_i5.AuthenticationStatus>.empty(),
        returnValueForMissingStub: _i4.Stream<_i5.AuthenticationStatus>.empty(),
      ) as _i4.Stream<_i5.AuthenticationStatus>);

  @override
  _i4.Future<_i2.User> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i4.Future<_i2.User>);

  @override
  _i4.Future<_i2.User> signup(_i2.UserSignup? newSignUp) => (super.noSuchMethod(
        Invocation.method(
          #signup,
          [newSignUp],
        ),
        returnValue: _i4.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #signup,
            [newSignUp],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #signup,
            [newSignUp],
          ),
        )),
      ) as _i4.Future<_i2.User>);

  @override
  _i4.Future<void> signout() => (super.noSuchMethod(
        Invocation.method(
          #signout,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.User?> tryGetUser() => (super.noSuchMethod(
        Invocation.method(
          #tryGetUser,
          [],
        ),
        returnValue: _i4.Future<_i2.User?>.value(),
        returnValueForMissingStub: _i4.Future<_i2.User?>.value(),
      ) as _i4.Future<_i2.User?>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
